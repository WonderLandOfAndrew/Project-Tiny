/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import classes.TreeNode;
import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
  protected TreeNode parseTreeRoot = null;

  public TreeNode getParseTree()
  {
	return parseTreeRoot;
  }
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */

terminal SEMI, PLUS, MINUS, TIMES, DIVIDE, QCHAR;
terminal LPAR, RPAR, LBRACE, RBRACE, LBRACK, RBRACK;
terminal IF, ELSE, WHILE, RETURN, WRITE, READ, LENGTH;
terminal GREATER, LESS, ASSIGN, NEQUAL, NOT, EQUAL, COMMA;  // Add new terminals here
terminal INT;
terminal CHAR;
terminal String NAME;

terminal Integer    NUMBER;        // our scanner provides numbers as integers

/* Non terminals */
non terminal TreeNode program;
non terminal TreeNode declaration;
non terminal TreeNode fun_declaration;
non terminal TreeNode formal_pars;
non terminal TreeNode formal_par;
non terminal TreeNode block;
non terminal TreeNode var_declaration;
non terminal TreeNode type;
non terminal TreeNode statements;
non terminal TreeNode statement;
non terminal TreeNode lexp;
non terminal TreeNode exp;
non terminal TreeNode binop;
non terminal TreeNode unop;
non terminal TreeNode pars;
non terminal TreeNode var;
non terminal TreeNode var_declarations;


/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left GREATER, LESS;
precedence left EQUAL, NEQUAL;


/* The grammar rules */

program ::= program:prog declaration:decl {: prog.addChild(decl); RESULT = prog; :}
			| declaration:decl	{: 
									parseTreeRoot = new TreeNode("Program");
									parseTreeRoot.addChild(decl);
									RESULT = parseTreeRoot;
								 :}
			;

declaration ::= fun_declaration:fd {: TreeNode result = new TreeNode("Declaration");
									  result.addChild(fd);		
									  RESULT = result;
									:}
			| var_declaration:vd   {:
												 
									  TreeNode result = new TreeNode("Declaration");
									  result.addChild(vd);		
									  RESULT = result;
									:}
			;

fun_declaration ::= type:t NAME:n LPAR formal_pars:fp RPAR block:b {: 
										TreeNode result = new TreeNode("Function" + n);
										result.addChild(t);
										result.addChild(fp);
										result.addChild(b);
										RESULT = result;	
									 :}
				;

formal_pars ::= formal_pars:fps COMMA formal_par:fp {: 
													   fps.addChild(fp);
													   RESULT = fps;			
													:}
              | formal_par:fp			     {: 
												TreeNode params = new TreeNode("ParamsList");
			 								   	params.addChild(fp); 
												RESULT = params; 
											 :}
              ;

formal_par ::= type:t NAME:n {: TreeNode result = new TreeNode("ParamsList" + n); 
								result.addChild(t);
								RESULT = result;
							 :}
			;

block ::= LBRACE var_declarations:vds statements:stmt RBRACE {: 
																TreeNode result = new TreeNode("Block");
																result.addChild(vds);
																result.addChild(stmt);
																RESULT = result;
													        :}
		;
var_declarations ::= var_declarations:vds var_declaration:vd {:
																	  vds.addChild(vd);
																	  RESULT = vds;
																   :}
					|											{: TreeNode result = new TreeNode("Var Declarations");
																   RESULT = result;
																:}
					;
var_declaration ::= type:t NAME:n SEMI	{:
										  TreeNode result = new TreeNode("Declaration" + n);
										  result.addChild(t);
										  RESULT = result; 
									    :}
				;

type			::= INT		{: RESULT = new TreeNode("TYPE");
							   RESULT.addChild(new TreeNode("INT"));
							 :}
				|	CHAR	{: RESULT = new TreeNode("TYPE");
							   RESULT.addChild(new TreeNode("CHAR")); :}
				|	type:t LBRACK exp:e RBRACK  {:  
										           TreeNode result = new TreeNode("Type");
										           result.addChild(t);
												   result.addChild(e);				
										           RESULT = result; 
												:}
				; // array type

statements ::= statements:stmts SEMI statement:stmt {:
                                                      stmts.addChild(stmt);
													  RESULT = stmts; 
                                                    :}
			| statement:stmt					 {:
											TreeNode result = new TreeNode("StatementsList");
			 								result.addChild(stmt); 
										    RESULT = result; 
									     :}
			;
			
statement  ::= IF LPAR exp:e RPAR statement:s			{: TreeNode result = new TreeNode("statement");
															result.addChild(e);
															result.addChild(s);	
															RESULT = result; 
														:}
            | IF LPAR exp:e RPAR statement:s ELSE statement:s1 {: TreeNode result = new TreeNode("IF ELSE");
                                                                  result.addChild(e);
																  result.addChild(s);
																  result.addChild(s1);
																  RESULT = result;
															   :}
            | WHILE LPAR exp:e RPAR statement:s				{: 
																TreeNode result = new TreeNode("WHILE");
																result.addChild(e);
																result.addChild(s);
																RESULT = result; 
															:}
			| lexp:le ASSIGN exp:e							{: TreeNode result = new TreeNode("ASSIGN");
															   result.addChild(le);
															   result.addChild(e);
															   RESULT = result; 
                                                            :}
            | RETURN exp:e								{: TreeNode result = new TreeNode("ASSIGN");
														   result.addChild(e);
                                                           RESULT = result; 
														:}
			| NAME LPAR pars:p RPAR						{: TreeNode result = new TreeNode("name pars");
														   result.addChild(p);
                                                           RESULT = result; 
														:}
            | block:b										{: TreeNode result = new TreeNode("block");
														       result.addChild(b);
                                                               RESULT = result; 
															:}
            | WRITE exp:e									{:
																TreeNode result = new TreeNode("WRITE");
														        result.addChild(e);
                                                                RESULT = result; 
														    :}
            | READ lexp:le									{: TreeNode result = new TreeNode("READ");
														       result.addChild(le);
                                                               RESULT = result; :}
            ;

lexp		::= var:v  {:
						  TreeNode result = new TreeNode("Logic expression list");
			 			  result.addChild(v); 
					      RESULT = result; 
					   :}
			|	lexp:lp LBRACK exp:e RBRACK {:
                                               lp.addChild(e);
											   RESULT = e; 
                                            :}
			; 	

exp			::=	lexp:le {: TreeNode result = new TreeNode("Expression");
						   result.addChild(le);
						   RESULT = result;  :}
			|	exp:expr binop:b exp:e {:expr.addChild(b); 
										 expr.addChild(e);
									     RESULT = expr; 
                                       :}
										
			|	unop:u exp:e {: TreeNode result = new TreeNode("UnvOperat");
								result.addChild(u);
								result.addChild(e);
                                RESULT = result;								
							 :}
			|	LPAR exp:e RPAR {: TreeNode result = new TreeNode("Expression2");
						   		result.addChild(e);
						   		RESULT = result;   :}
			|	NUMBER {: RESULT = new TreeNode("Number"); :}
			|	NAME:n LPAR pars:p RPAR {: TreeNode result = new TreeNode("Exp");
										   result.addChild( new TreeNode(n));
										   result.addChild(p);
										   RESULT = result;			 
										:}
			|	QCHAR:q {: RESULT = new TreeNode("" + q); :}
			|	LENGTH lexp:l1 {: TreeNode result= new TreeNode ("Lexpression");
							      result.addChild(l1);
							      RESULT = result;
							:}
			;
			
binop		::= MINUS {: RESULT = new TreeNode("Minus"); :}
			|	PLUS  {: RESULT = new TreeNode("Plus"); :}
			|	TIMES {: RESULT = new TreeNode("Times"); :}
			|	DIVIDE {: RESULT = new TreeNode("Divide"); :}
			|	EQUAL  {: RESULT = new TreeNode("Equal"); :}
			|	NEQUAL {: RESULT = new TreeNode("Not Equal"); :}
			|	GREATER {: RESULT = new TreeNode("Greater"); :}
			|	LESS {: RESULT = new TreeNode("Less"); :}
			;
			
unop		::= MINUS {: RESULT = new TreeNode("Minus"); :}
			|	NOT  {: RESULT = new TreeNode("Not"); :}
			;

pars		::= pars:p COMMA exp:e {:
								  		p.addChild(e);
								  		RESULT = p;
							       :}
			|	exp:e			   {: 
								  		TreeNode result = new TreeNode("Expression");
			 					  		result.addChild(e); 
					     		  		RESULT = result;
							       :}
			|   			   {:						
									 
								:}
			;		

var			::= NAME:n {:
						TreeNode result = new TreeNode("Variable");
						result.addChild(new TreeNode(n));
						RESULT = result;  
				     :}
			;

       